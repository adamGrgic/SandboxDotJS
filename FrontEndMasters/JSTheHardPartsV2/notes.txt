I. Introduction                                          *jshp_notes*
II. Generalized Functions      ...........             | generalizedfunctions|




----------------
| Introduction |
----------------

Will talks about the difference between junior/mid/senior level engineers, which
is mostly related to technical communication

Features
1. Thread of execution
    + JS goes line by line and executes each line as its given
2. Saves variables to be used later (??)


Thread of Execution
-------------------

const num = 3

This is an example of saving data into memory. We save the number 3 into
variable (instructor refers to this as "identifier") num so that when we see num again we know it means 3.


Consider the following function declaration:

function multiplyBy2 (inputNumber) {
    const result = inputNumber*2;
    return result;
}

* so far in memory we have:

Memory
======
num : 3
multiplyBy2 : f()


* now we declare the following:

const output = multiplyBy2 (num);

    + where multiplyBy2 is a function and num is variable with the value 3
        stored inside

    + we create a new execution context!
        -> local memory
        -> created to run the code of the function
            - 2 parts:
                1. thread of execution
                2. memory

    + when we jump into this new execution context, we first grab the param
        -> in this case, `num`

        -> sidenote: argument is the value of whats stored in a param.
            => in other words, param is the generic representation and argument
                is a specific value of that representation
            => similar, but different when communicating

    + Breaking down multiplyBy2(num)

    ____________ | Local memory

    output : 6      input number : 3
                    result : 6



Memory
======

num : 3
multibyBy2 : f()
result : 6



Call Stack
----------
JavaScript keeps track of what function is currently running
    -> "where's the thread of execution"

Run a function - add to call stack (LIFO)

Finish running the function - JS removes it from call stack

Whatever is top of the call stack -> that's the function we are currently
running

Global() is always at the bottom of the call stack


* when we create memory we don't only create data we also create code to run ,
  which is pretty cool !



Generalized Functions                                   *generalizedfunctions
---------------------

Why do we even have functions?
(ultimately, to re-use code that we would otherwise rewrite -- in a nutshell)


Lets see why ...

Create a function 10 squared
    - takes no input
    - Returns 10*10

What is the syntax?

- we use the keyword `function` and create name for function
    * Ex: function SomeFunction

- add `()` which creates an execution context

- add curly braces { } to create function body

- keep in mind the DRY principle (Don't repeat yourself)

- Instead of writing function TenSquared(), function NineSquared(), etc...
    -> we create a function that takes a param, num, that then takes the value
        of num and squares it , which eliminates our need for write individual
        squaring functions


